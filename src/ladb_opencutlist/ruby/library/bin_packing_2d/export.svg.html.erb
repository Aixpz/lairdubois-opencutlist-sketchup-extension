<!DOCTYPE html>
<html>
  <head>
    <style>
      body {
        margin: 20px;
        font-size: 12px;
        font-family: Calibri, Verdana;
      }
      canvas {
        margin: 10px 0;
        border: 1px solid #000;
      }
      .sheet {
        page-break-after: always;
      }
      .sheet .heading {
        font-size: 24px;
      }
      pre {
        white-space: pre-wrap;
      }

      /* SVG */

      svg {
        shape-rendering: geometricPrecision;
        text-rendering: optimizeLegibility;
      }

      /* .sheet */

      svg .sheet-outer {
        fill: #333;
      }
      svg .sheet-inner {
        fill: #d3d3d3;
      }
      svg .sheet-dimension {
        fill: #888;
      }

      /* .box */

      svg .box {
      }
      svg .box-outer {
        fill: <%= options[:box_outline_color] %>;
      }
      svg .box:hover {
        cursor: pointer !important;
      }
      svg .box:hover .box-outer {
        fill: #ff7700;
      }
      svg .box-inner {
        fill: #eee;
      }
      svg .box-number {
        fill: #000;
      }
      svg .box-dimension {
        fill: #000;
      }

      @media print {

        svg .box-outer {
          fill: #fff;
        }

        svg .box-inner {
          fill: #fff;
        }

      }

      /* .leftover */

      svg .leftover {
        fill: #fff;
      }
      svg .leftover-dimension {
        fill: #888;
      }
      svg .leftover-cross {
        stroke: #ccc;
        stroke-width: 1px;
      }

      /* .cut */

      svg .cut {
        fill: <%= options[:cut_color] %>;
      }

      @media print {

        svg .cut {
          fill: #000;
        }

      }

    </style>
  </head>
  <body>
  <!-- <%= options %> -->
  <% if unplaced_boxes.length() > 0 %>
    <h3>Parts too large to fit on one single sheet</h3>
  <% end %>
  <% unplaced_boxes.each do |box| %>
    <pre>
    <%= box.number[:number] %> <%= box.number[:name] %>, <%= box.number[:raw_length] %> x <%= box.number[:raw_width] %>
    </pre>
  <% end %>
  <% 
     if bins.length() > 0 && bins[0].boxes.length() > 0 then
     i = 0
     total = bins.length()
     bins.each do |bin| 
       i = i+1 %>
  <div class="sheet">
    <div class="heading"><%= group[:material_name] %>/<%= group[:std_dimension] %> : <%= i %> / <%= total %> --
    <%= dim(bin.length) %> x <%= dim(bin.width) %></div>
    <% 
      b = bin.boxes.group_by {|e| e.number[:number]}
      b.each do |k, v| %>
       <pre> <%= v.length() %> x <%= k %> <%= v[0].number[:name] %>: <%= v[0].number[:raw_length] %> x <%= v[0].number[:raw_width] %></pre>
    <% end %>

    <% sheetDimensionFontSize = 20 %>
    <% sheetDimensionOffset = 10 %>
    <% dimensionFontSize = 15 %>
    <% dimensionOffset = 3 %>
    <% numberFontSize = 28 %>
    <% sheetOutlineWidth = 1 %>
    <% boxOutlineWidth = options[:box_outline_width] %>

    <svg width="<%= zoom(bin.length) + sheetOutlineWidth * 2 + sheetDimensionOffset + sheetDimensionFontSize %>" height="<%= zoom(bin.width) + sheetOutlineWidth * 2 + sheetDimensionOffset + sheetDimensionFontSize %>" viewBox="-<%= sheetOutlineWidth + sheetDimensionOffset + sheetDimensionFontSize %> -<%= sheetOutlineWidth + sheetDimensionOffset + sheetDimensionFontSize %> <%= zoom(bin.length) + sheetOutlineWidth * 2 + sheetDimensionOffset + sheetDimensionFontSize %> <%= zoom(bin.width) + sheetOutlineWidth * 2 + sheetDimensionOffset + sheetDimensionFontSize %>">
      <text class="sheet-dimension" x="<%= zoom(bin.length / 2) %>" y="-<%= sheetOutlineWidth + sheetDimensionOffset %>" font-size="<%= sheetDimensionFontSize %>px" text-anchor="middle" dominant-baseline="alphabetic"><%= dim(bin.length) %></text>
      <text class="sheet-dimension" x="-<%= sheetOutlineWidth + sheetDimensionOffset %>" y="<%= zoom(bin.width / 2) %>" font-size="<%= sheetDimensionFontSize %>px" text-anchor="middle" dominant-baseline="alphabetic" transform="rotate(-90 <%= -sheetDimensionOffset  %>,<%= zoom(bin.width / 2) %>)"><%= dim(bin.width) %></text>
      <g class="sheet">
        <rect class="sheet-outer" x="-1" y="-1" width="<%= zoom(bin.length) + 2 %>" height="<%= zoom(bin.width) + 2 %>"></rect>
        <rect class="sheet-inner" x="0" y="0" width="<%= zoom(bin.length) %>" height="<%= zoom(bin.width) %>"></rect>
      </g>
      <% bin.boxes.each do |box| %>
        <g class="box">
          <rect class="box-outer" x="<%= zoom(box.x) %>" y="<%= zoom(box.y) %>" width="<%= zoom(box.length) %>" height="<%= zoom(box.width) %>"></rect>
          <rect class="box-inner" x="<%= zoom(box.x) + boxOutlineWidth %>" y="<%= zoom(box.y) + boxOutlineWidth %>" width="<%= zoom(box.length) - boxOutlineWidth * 2 %>" height="<%= zoom(box.width) - boxOutlineWidth * 2 %>"></rect>
          <text class="box-number" x="<%= zoom(box.x + box.length / 2) %>" y="<%= zoom(box.y + box.width / 2) %>" font-size="<%= numberFontSize %>px" text-anchor="middle" dominant-baseline="central"<% if box.rotated %> transform="rotate(-90 <%= zoom(box.x + box.length / 2) %>,<%= zoom(box.y + box.width / 2) %>)"<% end %>><%= box.number[:number] %></text>
          <% if options[:oriented_dimensions] %>
            <% centredLength = zoom(box.width) > (dimensionOffset + dimensionFontSize + numberFontSize) %>
            <% centredWidth = zoom(box.length) > (dimensionOffset + dimensionFontSize + numberFontSize) %>
            <text class="box-dimension" x="<%= centredLength ? zoom(box.x + box.length / 2) : zoom(box.x) + boxOutlineWidth + dimensionOffset + dimensionFontSize + dimensionOffset %>" y="<%= zoom(box.y) + boxOutlineWidth + dimensionOffset %>" font-size="<%= dimensionFontSize %>px" text-anchor="<% if centredLength %>middle<% else %>start<% end %>" dominant-baseline="hanging"><%= dim(box.length) %></text>
            <text class="box-dimension" x="<%= zoom(box.x) + boxOutlineWidth + dimensionOffset %>" y="<%= centredWidth ? zoom(box.y + box.width / 2) : zoom(box.y) + boxOutlineWidth + dimensionOffset + dimensionFontSize + dimensionOffset %>" font-size="<%= dimensionFontSize %>px" text-anchor="<% if centredWidth %>middle<% else %>end<% end %>" dominant-baseline="hanging" transform="rotate(-90 <%= zoom(box.x) + boxOutlineWidth + dimensionOffset %>,<%= centredWidth ? zoom(box.y + box.width / 2) : zoom(box.y) + boxOutlineWidth + dimensionOffset + dimensionFontSize + dimensionOffset %>)"><%= dim(box.width) %></text>
          <% else %>
            <text class="box-dimension" x="<%= zoom(box.x) + boxOutlineWidth + dimensionOffset %>" y="<%= zoom(box.y) + boxOutlineWidth + dimensionOffset %>" font-size="<%= dimensionFontSize %>px" text-anchor="start" dominant-baseline="hanging"><%= dim(box.length) %> x <%= dim(box.width) %></text>
          <% end %>
        </g>
      <% end %>
      <% bin.leftovers.each do |leftover| %>
        <% hideCross = zoom(leftover.length) < dimensionFontSize || zoom(leftover.width) < dimensionFontSize %>
        <% hideDimensions = zoom(leftover.length) < (dimensionFontSize + dimensionOffset) || zoom(leftover.width) < (dimensionFontSize + dimensionOffset) %>
        <rect class="leftover" x="<%= zoom(leftover.x) %>" y="<%= zoom(leftover.y) %>" width="<%= zoom(leftover.length) %>" height="<%= zoom(leftover.width) %>"></rect>
        <% unless hideCross %>
          <line class="leftover-cross" x1="<%= zoom(leftover.x + leftover.length) %>" y1="<%= zoom(leftover.y) %>" x2="<%= zoom(leftover.x) %>" y2="<%= zoom(leftover.y + leftover.width) %>"></line>
        <% end %>
        <% if options[:oriented_dimensions] %>
          <% unless hideCross %>
            <line class="leftover-cross" x1="<%= zoom(leftover.x) %>" y1="<%= zoom(leftover.y) %>" x2="<%= zoom(leftover.x + leftover.length) %>" y2="<%= zoom(leftover.y + leftover.width) %>"></line>
          <% end %>
          <% unless hideDimensions %>
            <text class="leftover-dimension" x="<%= zoom(leftover.x + leftover.length / 2) %>" y="<%= zoom(leftover.y) + dimensionOffset %>" font-size="<%= dimensionFontSize %>px" text-anchor="middle" dominant-baseline="hanging"><%= dim(leftover.length) %></text>
            <text class="leftover-dimension" x="<%= zoom(leftover.x) + dimensionOffset %>" y="<%= zoom(leftover.y + leftover.width / 2) %>" font-size="<%= dimensionFontSize %>px" text-anchor="middle" dominant-baseline="hanging" transform="rotate(-90 <%= zoom(leftover.x) + dimensionOffset %>,<%= zoom(leftover.y + leftover.width / 2) %>)"><%= dim(leftover.width) %></text>
          <% end %>
        <% else %>
          <% unless hideDimensions %>
            <text class="leftover-dimension" x="<%= zoom(leftover.x) + dimensionOffset %>" y="<%= zoom(leftover.y) + dimensionOffset %>" font-size="<%= dimensionFontSize %>px" text-anchor="start" dominant-baseline="hanging"><%= dim(leftover.length) %> x <%= dim(leftover.width) %></text>
          <% end %>
        <% end %>
      <% end %>
      <% bin.cuts.each do |cut| %>
        <rect class="cut <%= cut.is_primary ? 'primary' : 'secondary' %>" x="<%= zoom(cut.x) %>" y="<%= zoom(cut.y) %>" width="<%= cut.is_horizontal ? zoom(cut.length) : zoom(options[:kerf]) %>" height="<%= cut.is_horizontal ? zoom(options[:kerf]) : zoom(cut.length) %>"></rect>
      <% end %>
    </svg>

  </div>
  <% end 
   end
  %>
  </body>
</html>
